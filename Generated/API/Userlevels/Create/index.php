<?php


/**********************************************************************************/
/*** THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE PANICKAPPS API GENERATOR ***/

/*                It is HIGHLY suggested that you do not edit this file.          */

//  DATABASE:     Nicos
//  FILE:         API/create/index.php
//  TABLE:        userlevels
//  DATETIME:     2018-01-23 12:48:44am
//  DESCRIPTION:  N/A

/**********************************************************************************/
			


                
/*
        ~~~ API Endpoint Instructions ~~~
        
        This endpoint is not public and requires a Session ID to be provided for authorization.
        
        Sample call for API/Userlevels/create:

            API/Userlevels/create?UserLevelID...&UserLevelName...&SessionID=...

        /----------------------------------------------------------------

        Valid UserLevels are: Administrator (1)

        Call Parameters List:
        
		UserLevelID (int)
		UserLevelName (String)
		SessionID (String)

        ------------------------------------------------------------------


        This endpoint responds with JSON data in the following ways.

        Response Format:

        1) Response OK

            --> "Status": "OK"
            --> "Title": "Item added."
            --> "Message": "Item added successfully."

        2) Response ERROR
        
            --> "Status": "Error"
            --> "Title": "Item exists."
            --> "Message": "The item you tried to create already exists."

                (Invalid parameters)

            --> "Status": "Error"
            --> "Title": "Invalid Parameters"
            --> "Message": "Invalid parameters. Expected Parameters: UserLevelID (int), UserLevelName (String), SessionID (String)"

                (Technical error)

            --> "Status": "Error"
            --> "Title": "Technical Error"
            --> "Message": "A technical error has occured. Please consult the system's administrator."

                (Invalid identification)

            --> "Status": "Error"
            --> "Title": "Authorization Error"
            --> "Message": "You are not authorized to access this procedure. If you think you should be able to do so, please consult your system's administrator."


        ------------------------------------------------------------------

    */
                
                
                
    function onRequest() {
        $JSON_ADD_SUCCESS = array(STATUS => STATUS_OK, TITLE => CREATE_SUCCESS_TITLE, MESSAGE => CREATE_SUCCESS_MESSAGE);
        $JSON_ADD_ERROR = array(STATUS => STATUS_ERROR, TITLE => CREATE_ERROR_TITLE, MESSAGE => CREATE_ERROR_MESSAGE);
        $JSON_EXISTS_ERROR = array(STATUS => STATUS_ERROR, TITLE => "Item exists.", MESSAGE => "The item you tried to create already exists."); 
        
        include_once("../../../Scripts/Entity Classes/PHP/Userlevels.php");
        $object = new Userlevels($_POST["UserLevelID"], $_POST["UserLevelName"]);
        $result = Userlevels::create($object);
        if ($result) die(json_encode($JSON_ADD_SUCCESS));
        else die (json_encode($JSON_ADD_ERROR));
    }
    
    /*!!!!!!!!!!!!!!!!!!!!! DO NOT EDIT CODE BELOW THIS POINT !!!!!!!!!!!!!!!!!!!!!*/
    
    
    //Locals:
    const ENDPOINT_NAME = "API/Userlevels/Create";
                
    //Statuses:
    const STATUS_ERROR = "Error";
    const STATUS_OK = "OK";

    //Titles/Messages:
    const STATUS = "Status";
    const TITLE = "Title";
    const MESSAGE = "Message";
    const DATA = "Data";
    const INVALID_PARAMS_TITLE = "Invalid Parameters";
    const INVALID_PARAMS_MESSAGE = "Invalid parameters. Expected Parameters: UserLevelID (int), UserLevelName (String), SessionID (String)";
    const TECHNICAL_ERROR_TITLE = "Technical Error";
    const TECHNICAL_ERROR_MESSAGE = "A technical error has occured. Please consult the system's administrator.";
    const AUTHORIZATION_ERROR_TITLE = "Authorization Error";
    const AUTHORIZATION_ERROR_MESSAGE = "You are not authorized to access this procedure. If you think you should be able to do so, please consult your system's administrator.";
    const CREATE_SUCCESS_TITLE = "Item added.";
    const CREATE_SUCCESS_MESSAGE = "Item added successfully.";
    const CREATE_ERROR_TITLE = "Item add failed.";
    const CREATE_ERROR_MESSAGE = "Failed to add item.";
    

    //JSON returns:
    $JSON_INVALID_PARAMS = array(STATUS => STATUS_ERROR, TITLE => INVALID_PARAMS_TITLE, MESSAGE => INVALID_PARAMS_MESSAGE);
    $JSON_TECHNICAL_ERROR = array(STATUS => STATUS_ERROR, TITLE => TECHNICAL_ERROR_TITLE, MESSAGE => TECHNICAL_ERROR_MESSAGE);
    $JSON_AUTHORIZATION_ERROR = array(STATUS => STATUS_ERROR, TITLE => AUTHORIZATION_ERROR_TITLE, MESSAGE => AUTHORIZATION_ERROR_MESSAGE);
    

	//-- PARAMETER CHECKS

	if (!isset($_POST["UserLevelID"]) || $_POST["UserLevelID"] == "") die(json_encode($JSON_INVALID_PARAMS));
	if (!isset($_POST["UserLevelName"]) || $_POST["UserLevelName"] == "") die(json_encode($JSON_INVALID_PARAMS));
	if (!isset($_POST["SessionID"]) || $_POST["SessionID"] == "") die(json_encode($JSON_INVALID_PARAMS));
	include_once("../../../Scripts/DBLogin.php");
     
	//-- SECURITY CHECKS

    //Allowed user levels:
    $allowedUserLevelIDs = array(1);

    //Validate session if a session is required (not public)
    $sessionID = $_POST["SessionID"];
    $conn = dbLogin();
    $sqlSessions = "SELECT * FROM Sessions WHERE SessionID = '" . $sessionID . "'";
    $result = $conn->query($sqlSessions);
    if ($result === FALSE) die(json_encode($JSON_AUTHORIZATION_ERROR));
    else {
        $session = $result->fetch_object();
        $sqlGetUser = "SELECT UserLevelID FROM Users WHERE UserID = " . $session->UserID;
        $result = $conn->query($sqlGetUser);
        $user = $result->fetch_object();
        $allowed = false;
        foreach ($allowedUserLevelIDs as $id) {
            if ($user->UserLevelID == $id) {
                $allowed = true; break;
            }//end if match
        }//end foreach UserLevelID
        if (!$allowed) die(json_encode($JSON_AUTHORIZATION_ERROR));
    }//end if session found
    $conn->close();
    

	onRequest(); 

?>