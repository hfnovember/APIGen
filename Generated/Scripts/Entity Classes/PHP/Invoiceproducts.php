<?php


/**********************************************************************************/
/*** THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE PANICKAPPS API GENERATOR ***/

/*                It is HIGHLY suggested that you do not edit this file.          */

//  DATABASE:     easybusiness
//  FILE:         invoiceproducts.php
//  TABLE:        invoiceproducts
//  DATETIME:     2018-01-25 01:20:25pm
//  DESCRIPTION:  N/A

/**********************************************************************************/
			

class Invoiceproducts implements JsonSerializable {

	//-------------------- Attributes --------------------

    private $ID;
    private $InvoiceID;
    private $ProductID;
    private $Quantity;

	//-------------------- Constructor --------------------

    public function __construct(
		$ID, 
		$InvoiceID, 
		$ProductID, 
		$Quantity
		) {
        $this->ID = $ID;
		$this->InvoiceID = $InvoiceID;
		$this->ProductID = $ProductID;
		$this->Quantity = $Quantity;
    }

	//-------------------- Reflectors --------------------

	public static $allFields = array(
		"ID", 
		"InvoiceID", 
		"ProductID", 
		"Quantity"
	);

	public static $hasUniqueFields = false;

	//-------------------- Getter Methods --------------------

	/**
     * @return int(11)
     */
     public function getID() { return $this->ID; }

	/**
     * @return int(11)
     */
     public function getInvoiceID() { return $this->InvoiceID; }

	/**
     * @return int(11)
     */
     public function getProductID() { return $this->ProductID; }

	/**
     * @return int(11)
     */
     public function getQuantity() { return $this->Quantity; }


    /**
     * @return int(11)
     */
     public function getObjectID() { return $this->ID; }


	//-------------------- Setter Methods --------------------

	/**
     * @param $value int(11)
     */
     public function setInvoiceID($value) { $this->InvoiceID = $value; }

	/**
     * @param $value int(11)
     */
     public function setProductID($value) { $this->ProductID = $value; }

	/**
     * @param $value int(11)
     */
     public function setQuantity($value) { $this->Quantity = $value; }


	//-------------------- Static (Database) Methods --------------------

            
            
    /**
     * Creates a database entry with the given object's data.
     * @param $t1_object Invoiceproducts
     * @return bool
     */
    public static function create($invoiceproducts_object) {
        $conn = dbLogin();
        $sql = "INSERT INTO invoiceproducts (InvoiceID, ProductID, Quantity) VALUES ($invoiceproducts_object->InvoiceID, $invoiceproducts_object->ProductID, $invoiceproducts_object->Quantity)";
        if ($conn->query($sql) === TRUE) return true;
        else return false;
    }


     /**
     * Retrieves a database entry matching the ID value provided.
     * @param $id int(11)
     * @return bool|Invoiceproducts
     */
    public static function getByID($id) {
        $conn = dbLogin();
        $sql = "SELECT * FROM invoiceproducts WHERE ID = " . $id;
        $result = $conn->query($sql);
        $sqlRowItemAsAssocArray = null;
        if ($result->num_rows > 0) {
            $sqlRowItemAsAssocArray = $result->fetch_assoc();
            $object = new Invoiceproducts(
				$sqlRowItemAsAssocArray["ID"], 
				$sqlRowItemAsAssocArray["InvoiceID"], 
				$sqlRowItemAsAssocArray["ProductID"], 
				$sqlRowItemAsAssocArray["Quantity"]);
            return $object;
        }
        else return false;
    }


    /**
     * Retrieves all entries or up to a specified limit from the database. Use 0 or negative values as limit to retrieve all entries.
     * @param $limit int
     * @return array|bool
     */
    public static function getMultiple($limit) {
        $conn = dbLogin();
        $sql = "SELECT * FROM invoiceproducts";
        if ($limit > 0) $sql .= " LIMIT " . $limit;
        $result = $conn->query($sql);
        $itemsArray = array();
        if ($result->num_rows > 0) {
            if ($result->num_rows > 0) {
                while($row = $result->fetch_assoc()) {
                    $object = new Invoiceproducts(
				$row["ID"], 
				$row["InvoiceID"], 
				$row["ProductID"], 
				$row["Quantity"]);
                    array_push($itemsArray, $object);
                }
            }
            return $itemsArray;
        }
        return false;
    }


    /**
     * Updates a database entry with the given object's data.
     * @param $t1_object Invoiceproducts
     * @return bool
     */
    public static function update($invoiceproducts_object) {
        $conn = dbLogin();
        $sql = "UPDATE invoiceproducts SET InvoiceID = " . $invoiceproducts_object->getInvoiceID() . ", ProductID = " . $invoiceproducts_object->getProductID() . ", Quantity = " . $invoiceproducts_object->getQuantity() . " WHERE ID = " . $invoiceproducts_object->getID();
        $conn->query($sql);
        if ($conn->affected_rows > 0) return true;
        else return false;
    }


    /**
     * Deletes an entry from the database given the object's data.
     * @param $id Int(11)
     * @return bool
     */
    public static function delete($id) {
        $conn = dbLogin();
        $sql = "DELETE FROM invoiceproducts WHERE ID = \"" . $id . "\"";
        $result = $conn->query($sql);
        if ($conn->affected_rows > 0) return true;
        else return false;
    }


    /**
     * Returns the number of entries in the database.
     * @return int
     */
    public static function getSize() {
        $conn = dbLogin();
        $sql = "SHOW TABLE STATUS WHERE Name = \"invoiceproducts\"";
        $result = $conn->query($sql);
        if ($result) return $result->fetch_object()->Rows;
        else return false;
    }


    /**
     * Returns true if the database is empty or false otherwise.
     * @return bool
     */
    public static function isEmpty() {
        $size = self::getSize();
        return ($size == 0);
    }


    /**
     * Searches the database for matches in the given field-value pairs in the given associative array.
     * The array should be in the format FieldName -> ValueToSearch where both values are strings.
     * @return array|bool
     */
    public static function searchByFields($fieldsAndValuesAssocArray) {
        $conn = dbLogin();
        
        $combinedWhereClause = "";
        
        foreach ($fieldsAndValuesAssocArray as $field => $value) {
            $combinedWhereClause .= $field . " = \"" . $value . "\" AND ";
        }
        $combinedWhereClause = substr($combinedWhereClause, 0, strlen($combinedWhereClause) - 4);
        
        $sql = "SELECT * FROM invoiceproducts WHERE " . $combinedWhereClause;
        $result = $conn->query($sql);
        if (!$result) return false;
        $itemsArray = array();
        while ($row = $result->fetch_assoc()) {
            $object = new Invoiceproducts(
				$row["ID"], 
				$row["InvoiceID"], 
				$row["ProductID"], 
				$row["Quantity"]);
            array_push($itemsArray, $object);
        }
        return $itemsArray;
    }

	//-------------------- JSON Generation Methods --------------------

    /**
     * Specifies how objects of this class should be converted to JSON format.
     * @return string
     */
    public function jsonSerialize() {
        $jsonStr = "{\"ID\": $this->ID, \"InvoiceID\": $this->InvoiceID, \"ProductID\": $this->ProductID, \"Quantity\": $this->Quantity }";
        return $jsonStr;
    }
    
    /**
     * Converts an array of Invoiceproducts objects to a JSON Array.
     * @param $Invoiceproducts_array Invoiceproducts Array
     * @return bool|string
     */
    public static function toJSONArray($Invoiceproducts_array) {
        $strArray = "[ ";
        foreach ($Invoiceproducts_array as $i) {
            $strArray .= $i->jsonSerialize() . ", ";
        }
        $strArray = substr($strArray, 0, strlen($strArray) - 3);
        $strArray .= "} ] ";
        return $strArray;
    }

}

?>