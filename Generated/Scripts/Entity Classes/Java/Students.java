


/**********************************************************************************/
/*** THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE PANICKAPPS API GENERATOR ***/

/*                It is HIGHLY suggested that you do not edit this file.          */

/* DATABASE:		test */
/* FILE:		students.java */
/* TABLE:		students */
/* DATETIME:		2018-01-18 12:45:06pm */
/* DESCRIPTION:		N/A*/

/**********************************************************************************/
			


import java.io.Serializable;
class Students implements Serializable {

	//-------------------- Attributes --------------------

    private ID;
    private Name;
    private Balance;
    private IsSmoker;

	//-------------------- Constructor --------------------

    public Students(
		ID, 
		Name, 
		Balance, 
		IsSmoker
		) {
        this->ID = ID;
		this->Name = Name;
		this->Balance = Balance;
		this->IsSmoker = IsSmoker;
    }

	//-------------------- Getter Methods --------------------

	/**
     * @return int(11)
     */
     public getID() { return this.ID; }

	/**
     * @return varchar(255)
     */
     public getName() { return this.Name; }

	/**
     * @return double
     */
     public getBalance() { return this.Balance; }

	/**
     * @return tinyint(1)
     */
     public getIsSmoker() { return this.IsSmoker; }


	//-------------------- Setter Methods --------------------

	/**
     * @param value varchar(255)
     */
     public function setName($value) { $this->Name = $value; }

	/**
     * @param value double
     */
     public function setBalance($value) { $this->Balance = $value; }

	/**
     * @param value tinyint(1)
     */
     public function setIsSmoker($value) { $this->IsSmoker = $value; }


	//-------------------- Static (Database) Methods --------------------

            
            
    /**
     * Creates a database entry with the given object's data.
     * @param $t1_object Students
     * @return bool
     */
    public static function create($students_object) {
        $conn = dbLogin();
        $sql = "INSERT INTO students (Name, Balance, IsSmoker) VALUES (\"" . $students_object->Name . "\", $students_object->Balance, " . booleanFix($students_object->IsSmoker) . ")";
        if ($conn->query($sql) === TRUE) return true;
        else return false;
    }


     /**
     * Retrieves a database entry matching the ID value provided.
     * @param $id int(11)
     * @return bool|Students
     */
    public static function getByID($id) {
        $conn = dbLogin();
        $sql = "SELECT * FROM students WHERE ID = " . $id;
        $result = $conn->query($sql);
        $sqlRowItemAsAssocArray = null;
        if ($result->num_rows > 0) {
            $sqlRowItemAsAssocArray = $result->fetch_assoc();
            $object = new Students(
				sqlRowItemAsAssocArray["ID"], 
				sqlRowItemAsAssocArray["Name"], 
				sqlRowItemAsAssocArray["Balance"], 
				sqlRowItemAsAssocArray["IsSmoker"]);
            return $object;
        }
        else return false;
    }


    /**
     * Retrieves all entries or up to a specified limit from the database. Use 0 or negative values as limit to retrieve all entries.
     * @param $limit int
     * @return array|bool
     */
    public static function getMultiple($limit) {
        $conn = dbLogin();
        $sql = "SELECT * FROM students";
        if ($limit > 0) $sql .= " LIMIT " . $limit;
        $result = $conn->query($sql);
        $itemsArray = array();
        if ($result->num_rows > 0) {
            if ($result->num_rows > 0) {
                while($row = $result->fetch_assoc()) {
                    $object = new Students(
				row["ID"], 
				row["Name"], 
				row["Balance"], 
				row["IsSmoker"]);
                    array_push($itemsArray, $object);
                }
            }
            return $itemsArray;
        }
        return false;
    }


    /**
     * Updates a database entry with the given object's data.
     * @param $t1_object Students
     * @return bool
     */
    public static function update($students_object) {
        $conn = dbLogin();
        $sql = "UPDATE students SET Name = \"" . $students_object->getName() . "\", Balance = " . $students_object->getBalance() . ", IsSmoker = " . booleanFix($students_object->getIsSmoker()) . " WHERE ID = " . $students_object->getID();
        if ($conn->query($sql) === TRUE) return true;
        else return false;
    }


    /**
     * Deletes an entry from the database given the object's data.
     * @param $t1_object Students
     * @return bool
     */
    public static function delete($students_object) {
        $conn = dbLogin();
        $sql = "DELETE FROM students WHERE ID = " . $students_object->getID();
        if ($conn->query($sql) === TRUE) return true;
        else return false;
    }


    /**
     * Returns the number of entries in the database.
     * @return int
     */
    public static function getSize() {
        $conn = dbLogin();
        $sql = "SELECT COUNT(ID) FROM students";
        $result = $conn->query($sql);
        return $result->fetch_array()[0];
    }


    /**
     * Returns true if the database is empty or false otherwise.
     * @return bool
     */
    public static function isEmpty() {
        $conn = dbLogin();
        $sql = "SELECT COUNT(ID) FROM students";
        $result = $conn->query($sql);
        return ($result->fetch_array()[0] == 0);
    }

	//-------------------- JSON Generation Methods --------------------

    /**
     * Specifies how objects of this class should be converted to JSON format.
     * @return string
     */
    public function jsonSerialize() {
        $jsonStr = "{
		\"ID\": $this->ID,
		\"Name\": \"" . $this->Name. "\",
		\"Balance\": $this->Balance,
		\"IsSmoker\": $this->IsSmoker }";
        return $jsonStr;
    }
    
    /**
     * Converts an array of Students objects to a JSON Array.
     * @param $Students_array Students Array
     * @return bool|string
     */
    public static function toJSONArray($Students_array) {
        $strArray = "[ ";
        foreach ($Students_array as $i) {
            $strArray .= $i->jsonSerialize() . ", ";
        }
        $strArray = substr($strArray, 0, strlen($strArray) - 3);
        $strArray .= "} ] ";
        return $strArray;
    }

}

