<?php


/**********************************************************************************/
/*** THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE PANICKAPPS API GENERATOR ***/

/*                It is HIGHLY suggested that you do not edit this file.          */

/* DATABASE:		test */
/* FILE:		t1.php */
/* TABLE:		t1 */
/* DATETIME:		2018-01-17 11:50:50pm */
/* DESCRIPTION:		N/A*/

/**********************************************************************************/
			


include_once("DBLogin.php");

class T1 implements JsonSerializable {

	//-------------------- Attributes --------------------

    private $PersonID;
    private $Name;
    private $Balance;
    private $DateCreated;
    private $IsSmoker;
    private $isSupervisor;

	//-------------------- Constructor --------------------

    public function __construct(
		$PersonID, 
		$Name, 
		$Balance, 
		$DateCreated, 
		$IsSmoker, 
		$isSupervisor
		) {
        $this->PersonID = $PersonID;
		$this->Name = $Name;
		$this->Balance = $Balance;
		$this->DateCreated = $DateCreated;
		$this->IsSmoker = $IsSmoker;
		$this->isSupervisor = $isSupervisor;
    }

	//-------------------- Getter Methods --------------------

	/**
     * @return int(11)
     */
     public function getPersonID() { return $this->PersonID; }

	/**
     * @return varchar(255)
     */
     public function getName() { return $this->Name; }

	/**
     * @return float
     */
     public function getBalance() { return $this->Balance; }

	/**
     * @return int(11)
     */
     public function getDateCreated() { return $this->DateCreated; }

	/**
     * @return tinyint(1)
     */
     public function getIsSmoker() { return $this->IsSmoker; }

	/**
     * @return tinyint(1)
     */
     public function getIsSupervisor() { return $this->isSupervisor; }


	//-------------------- Setter Methods --------------------

	/**
     * @param $value varchar(255)
     */
     public function setName($value) { $this->Name = $value; }

	/**
     * @param $value float
     */
     public function setBalance($value) { $this->Balance = $value; }

	/**
     * @param $value int(11)
     */
     public function setDateCreated($value) { $this->DateCreated = $value; }

	/**
     * @param $value tinyint(1)
     */
     public function setIsSmoker($value) { $this->IsSmoker = $value; }

	/**
     * @param $value tinyint(1)
     */
     public function setIsSupervisor($value) { $this->isSupervisor = $value; }


	//-------------------- Static (Database) Methods --------------------

            
            
    /**
     * Creates a database entry with the given object's data.
     * @param $t1_object T1
     * @return bool
     */
    public static function create($t1_object) {
        $conn = dbLogin();
        $sql = "INSERT INTO t1 (Name, Balance, DateCreated, IsSmoker, isSupervisor) VALUES (\"" . $t1_object->Name . "\", $t1_object->Balance, $t1_object->DateCreated, " . booleanFix($t1_object->IsSmoker) . ", " . booleanFix($t1_object->isSupervisor) . ")";
        if ($conn->query($sql) === TRUE) return true;
        else return false;
    }


     /**
     * Retrieves a database entry matching the ID value provided.
     * @param $id int(11)
     * @return bool|T1
     */
    public static function getByID($id) {
        $conn = dbLogin();
        $sql = "SELECT * FROM t1 WHERE PersonID = " . $id;
        $result = $conn->query($sql);
        $sqlRowItemAsAssocArray = null;
        if ($result->num_rows > 0) {
            $sqlRowItemAsAssocArray = $result->fetch_assoc();
            $object = new T1(
				$sqlRowItemAsAssocArray["PersonID"], 
				$sqlRowItemAsAssocArray["Name"], 
				$sqlRowItemAsAssocArray["Balance"], 
				$sqlRowItemAsAssocArray["DateCreated"], 
				$sqlRowItemAsAssocArray["IsSmoker"], 
				$sqlRowItemAsAssocArray["isSupervisor"]);
            return $object;
        }
        else return false;
    }


    /**
     * Returns a database entry matching the unique field value provided.
     * @param $indexValue varchar(255)
     * @return bool|T1
     */
    public static function getByName($indexValue) {
        $conn = dbLogin();
        $sql = "SELECT * FROM t1 WHERE Name = '" . $indexValue . "'";
        $result = $conn->query($sql);
        $sqlRowItemAsAssocArray = null;
        if ($result->num_rows > 0) {
            $sqlRowItemAsAssocArray = $result->fetch_assoc();
            $object = new T1(
				$sqlRowItemAsAssocArray["PersonID"], 
				$sqlRowItemAsAssocArray["Name"], 
				$sqlRowItemAsAssocArray["Balance"], 
				$sqlRowItemAsAssocArray["DateCreated"], 
				$sqlRowItemAsAssocArray["IsSmoker"], 
				$sqlRowItemAsAssocArray["isSupervisor"]);
            return $object;
        }
        else return false;
    }


    /**
     * Retrieves all entries or up to a specified limit from the database. Use 0 or negative values as limit to retrieve all entries.
     * @param $limit int
     * @return array|bool
     */
    public static function getMultiple($limit) {
        $conn = dbLogin();
        $sql = "SELECT * FROM t1";
        if ($limit > 0) $sql .= " LIMIT " . $limit;
        $result = $conn->query($sql);
        $itemsArray = array();
        if ($result->num_rows > 0) {
            if ($result->num_rows > 0) {
                while($row = $result->fetch_assoc()) {
                    $object = new T1(
				$row["PersonID"], 
				$row["Name"], 
				$row["Balance"], 
				$row["DateCreated"], 
				$row["IsSmoker"], 
				$row["isSupervisor"]);
                    array_push($itemsArray, $object);
                }
            }
            return $itemsArray;
        }
        return false;
    }


    /**
     * Updates a database entry with the given object's data.
     * @param $t1_object T1
     * @return bool
     */
    public static function update($t1_object) {
        $conn = dbLogin();
        $sql = "UPDATE t1 SET Name = \"" . $t1_object->getName() . "\", Balance = " . $t1_object->getBalance() . ", DateCreated = " . $t1_object->getDateCreated() . ", IsSmoker = " . booleanFix($t1_object->getIsSmoker()) . ", isSupervisor = " . booleanFix($t1_object->getIsSupervisor()) . " WHERE PersonID = " . $t1_object->getPersonID();
        if ($conn->query($sql) === TRUE) return true;
        else return false;
    }


    /**
     * Deletes an entry from the database given the object's data.
     * @param $t1_object T1
     * @return bool
     */
    public static function delete($t1_object) {
        $conn = dbLogin();
        $sql = "DELETE FROM t1 WHERE PersonID = " . $t1_object->getPersonID();
        if ($conn->query($sql) === TRUE) return true;
        else return false;
    }


    /**
     * Returns the number of entries in the database.
     * @return int
     */
    public static function getSize() {
        $conn = dbLogin();
        $sql = "SELECT COUNT(PersonID) FROM t1";
        $result = $conn->query($sql);
        return $result->fetch_array()[0];
    }


    /**
     * Returns true if the database is empty or false otherwise.
     * @return bool
     */
    public static function isEmpty() {
        $conn = dbLogin();
        $sql = "SELECT COUNT(PersonID) FROM t1";
        $result = $conn->query($sql);
        return ($result->fetch_array()[0] == 0);
    }

	//-------------------- JSON Generation Methods --------------------

    /**
     * Specifies how objects of this class should be converted to JSON format.
     * @return string
     */
    public function jsonSerialize() {
        $jsonStr = "{
		\"PersonID\": $this->PersonID,
		\"Name\": \"" . $this->Name. "\",
		\"Balance\": $this->Balance,
		\"DateCreated\": $this->DateCreated,
		\"IsSmoker\": $this->IsSmoker,
		\"isSupervisor\": $this->isSupervisor }";
        return $jsonStr;
    }
    
    /**
     * Converts an array of T1 objects to a JSON Array.
     * @param $T1_array T1 Array
     * @return bool|string
     */
    public static function toJSONArray($T1_array) {
        $strArray = "[ ";
        foreach ($T1_array as $i) {
            $strArray .= $i->jsonSerialize() . ", ";
        }
        $strArray = substr($strArray, 0, strlen($strArray) - 3);
        $strArray .= "} ] ";
        return $strArray;
    }

}

?>