<?php


/**********************************************************************************/
/*** THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY THE PANICKAPPS API GENERATOR ***/

/*                It is HIGHLY suggested that you do not edit this file.          */

/* DATABASE:		test */
/* FILE:		t2.php */
/* TABLE:		t2 */
/* DATETIME:		2018-01-17 11:50:50pm */
/* DESCRIPTION:		N/A*/

/**********************************************************************************/
			


include_once("DBLogin.php");

class T2 implements JsonSerializable {

	//-------------------- Attributes --------------------

    private $email;
    private $t2Name;
    private $age;

	//-------------------- Constructor --------------------

    public function __construct(
		$email, 
		$t2Name, 
		$age
		) {
        $this->email = $email;
		$this->t2Name = $t2Name;
		$this->age = $age;
    }

	//-------------------- Getter Methods --------------------

	/**
     * @return varchar(255)
     */
     public function getEmail() { return $this->email; }

	/**
     * @return varchar(255)
     */
     public function getT2Name() { return $this->t2Name; }

	/**
     * @return int(11)
     */
     public function getAge() { return $this->age; }


	//-------------------- Setter Methods --------------------

	/**
     * @param $value varchar(255)
     */
     public function setT2Name($value) { $this->t2Name = $value; }

	/**
     * @param $value int(11)
     */
     public function setAge($value) { $this->age = $value; }


	//-------------------- Static (Database) Methods --------------------

            
            
    /**
     * Creates a database entry with the given object's data.
     * @param $t1_object T2
     * @return bool
     */
    public static function create($t2_object) {
        $conn = dbLogin();
        $sql = "INSERT INTO t2 (email, t2Name, age) VALUES (\"" . $t2_object->email . "\", \"" . $t2_object->t2Name . "\", $t2_object->age)";
        if ($conn->query($sql) === TRUE) return true;
        else return false;
    }


     /**
     * Retrieves a database entry matching the ID value provided.
     * @param $id varchar(255)
     * @return bool|T2
     */
    public static function getByID($id) {
        $conn = dbLogin();
        $sql = "SELECT * FROM t2 WHERE email = '" . $id . "'";
        $result = $conn->query($sql);
        $sqlRowItemAsAssocArray = null;
        if ($result->num_rows > 0) {
            $sqlRowItemAsAssocArray = $result->fetch_assoc();
            $object = new T2(
				$sqlRowItemAsAssocArray["email"], 
				$sqlRowItemAsAssocArray["t2Name"], 
				$sqlRowItemAsAssocArray["age"]);
            return $object;
        }
        else return false;
    }


    /**
     * Returns a database entry matching the unique field value provided.
     * @param $indexValue varchar(255)
     * @return bool|T2
     */
    public static function getByT2Name($indexValue) {
        $conn = dbLogin();
        $sql = "SELECT * FROM t2 WHERE t2Name = '" . $indexValue . "'";
        $result = $conn->query($sql);
        $sqlRowItemAsAssocArray = null;
        if ($result->num_rows > 0) {
            $sqlRowItemAsAssocArray = $result->fetch_assoc();
            $object = new T2(
				$sqlRowItemAsAssocArray["email"], 
				$sqlRowItemAsAssocArray["t2Name"], 
				$sqlRowItemAsAssocArray["age"]);
            return $object;
        }
        else return false;
    }


    /**
     * Retrieves all entries or up to a specified limit from the database. Use 0 or negative values as limit to retrieve all entries.
     * @param $limit int
     * @return array|bool
     */
    public static function getMultiple($limit) {
        $conn = dbLogin();
        $sql = "SELECT * FROM t2";
        if ($limit > 0) $sql .= " LIMIT " . $limit;
        $result = $conn->query($sql);
        $itemsArray = array();
        if ($result->num_rows > 0) {
            if ($result->num_rows > 0) {
                while($row = $result->fetch_assoc()) {
                    $object = new T2(
				$row["email"], 
				$row["t2Name"], 
				$row["age"]);
                    array_push($itemsArray, $object);
                }
            }
            return $itemsArray;
        }
        return false;
    }


    /**
     * Updates a database entry with the given object's data.
     * @param $t1_object T2
     * @return bool
     */
    public static function update($t2_object) {
        $conn = dbLogin();
        $sql = "UPDATE t2 SET t2Name = \"" . $t2_object->getT2Name() . "\", age = " . $t2_object->getAge() . " WHERE email = \"" . $t2_object->getEmail() . "\"";
        if ($conn->query($sql) === TRUE) return true;
        else return false;
    }


    /**
     * Deletes an entry from the database given the object's data.
     * @param $t1_object T2
     * @return bool
     */
    public static function delete($t2_object) {
        $conn = dbLogin();
        $sql = "DELETE FROM t2 WHERE email = \"" . $t2_object->getEmail() . "\"";
        if ($conn->query($sql) === TRUE) return true;
        else return false;
    }


    /**
     * Returns the number of entries in the database.
     * @return int
     */
    public static function getSize() {
        $conn = dbLogin();
        $sql = "SELECT COUNT(email) FROM t2";
        $result = $conn->query($sql);
        return $result->fetch_array()[0];
    }


    /**
     * Returns true if the database is empty or false otherwise.
     * @return bool
     */
    public static function isEmpty() {
        $conn = dbLogin();
        $sql = "SELECT COUNT(email) FROM t2";
        $result = $conn->query($sql);
        return ($result->fetch_array()[0] == 0);
    }

	//-------------------- JSON Generation Methods --------------------

    /**
     * Specifies how objects of this class should be converted to JSON format.
     * @return string
     */
    public function jsonSerialize() {
        $jsonStr = "{
		\"email\": \"" . $this->email. "\",
		\"t2Name\": \"" . $this->t2Name. "\",
		\"age\": $this->age }";
        return $jsonStr;
    }
    
    /**
     * Converts an array of T2 objects to a JSON Array.
     * @param $T2_array T2 Array
     * @return bool|string
     */
    public static function toJSONArray($T2_array) {
        $strArray = "[ ";
        foreach ($T2_array as $i) {
            $strArray .= $i->jsonSerialize() . ", ";
        }
        $strArray = substr($strArray, 0, strlen($strArray) - 3);
        $strArray .= "} ] ";
        return $strArray;
    }

}

?>